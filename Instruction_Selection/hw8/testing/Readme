[Note: Compare with the unnormalized outputs in the tar file
 unnormalized_outputs.tar.gz if you have doubts when you look at
 the normalized outputs. There could be issues with the perl script
 in normalize, I trust my compiler code a lot more.]

These directions for semi-automated testing are similar to those for
homeworks 7. Once again, I don't think it is a great idea to blindly
compare the code your compiler generates with that generated by mine.
For this reason, I have commented out the part of the script that allows
you to do this. The main use of the framework is to run the compiler
on a bunch of test cases in one go rather than by running them on the
test cases one by one.

Here are the specific instructions for using the automated testing
framework:

1. Edit the first two lines of the runsml file to indicate whether
or not you have a working lexer and parser.

2. Choose one line among the next three lines (lines 3-6) to indicate
which set of tests to use. You can choose a line by uncommenting it
(removing the #), while keeping the other two lines commented (retain
the #). 'full', 'translate', 'syntax' and 'select' refer to
'full-compiler-tests', 'translation', 'syntax-and-sem-analysis' and
'select-testcases' set of tests respectively. If you uncomment multiple
lines, the last one will be selected.

3. Edit the next three lines to indicate the correct directories
for the source code, the *root* for the test cases and the current
directory. Typically, you will want to leave the last as is. As
before, remember that you should not use ~ in paths. You can use ..,
though. Also note that since the select-testcases were not included
in the original testcases directory, we have assumed that they reside
only in the working directory (i.e. the one indicated by pwd). If you
want to change this, you will have to edit the resetting of TESTCASE_DIR
in the nested if-then-else that follows.

4. If you want to pick your test cases yourself, comment out the line that
reads

    ls $TESTCASE_DIR/$TESTCASE_SUB_DIR > files.list

and populate the file files.list with the names of the test cases you have
chosen.

5. Make sure you do not have a file named compile.sml.bak in the code
directory that you want to preserve; if you do, move it somewhere else
(or change the lines in runsml that make use of this name to save a
copy of the original parse.sml file).

6. Run ./runsml. This will run the driver for all files in the chosen
testcases directory; if you include the commented out portions, it will
also normalize the results, compare them to mine and show you where these
differ.

7. If you want to compar your code with mine, then include the last block
of code in runsml, i.e. remove the # symbol from in front of the relevant
lines. Also, find it difficult to understand the output of the diff tool on
the terminal, you could instead use visual diff tools, such as 'meld'. You
can integrate this into the runsml script by replacing lines:

      diff $BASELINE_OUTPUTS_DIR/$line.normalized $CURR_DIR/$OUTPUTS_DIR/$line.normalized

with:
      meld $BASELINE_OUTPUTS_DIR/$line.normalized $CURR_DIR/$OUTPUTS_DIR/$line.normalized

which will start the GUI interface of meld for comparing the files. Remember,
if you are connecting to a CSE machine remotely using ssh to run the tests,
then you will have to use the -X flag as shown below

        ssh -X name@machine.cs.umn.edu

when connecting.
