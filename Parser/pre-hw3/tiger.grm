structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  program | exp | dec | tydec | ty | tyfields | vardec | typeid | fundec | lvalue | funccall | funcparam | letcall | arithexp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				()

exp: dec    ()
   | lvalue ()
   | arithexp     ()
   | funccall  ()
   | letcall   ()
   | lvalue ASSIGN exp             ()
   | IF exp THEN exp ELSE exp      ()
   | IF exp THEN exp               ()   
   | WHILE exp DO exp              ()
   | FOR ID ASSIGN exp TO exp DO exp   ()	   
   | LBRACE exp SEMICOLON exp RBRACE   ()
   | NIL    ()
	    
dec: tydec		()
   | fundec             ()
   | vardec             ()
   | NIL                ()
			
tydec: TYPE ID EQ ty          ()

ty: ID  ()
   | LBRACE tyfields RBRACE   () 
   | ARRAY OF ID              ()

tyfields: NIL             ()
	| ID COLON typeid tyfields ()
	| COMMA ID COLON typeid tyfields ()
		
typeid: INT ()
      | STRING ()
      | ID             ()

vardec: VAR ID ASSIGN exp           ()
      | VAR ID COLON typeid ASSIGN exp   ()
      | VAR ID COLON typeid ASSIGN typeid LBRACK exp RBRACK OF exp   ()

   
fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp   ()
      | FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp ()

lvalue: ID ()
      | lvalue DOT ID   ()
      | lvalue LBRACK exp RBRACK     ()

funccall: ID LBRACE funcparam RBRACE ()

funcparam: exp funcparam   ()
	 | COMMA exp funcparam  ()
	 | NIL   ()

letcall: LET dec IN exp END   ()

arithexp: INT    ()
     | arithexp PLUS arithexp  ()
     | arithexp MINUS arithexp  ()
     | arithexp TIMES arithexp  ()
     | arithexp DIVIDE arithexp  () 
	   
